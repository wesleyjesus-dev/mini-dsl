// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Nebula.Ast
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Handler : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Handler GetRootAsHandler(ByteBuffer _bb) { return GetRootAsHandler(_bb, new Handler()); }
  public static Handler GetRootAsHandler(ByteBuffer _bb, Handler obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Handler __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Nebula.Ast.HandlerType Type { get { int o = __p.__offset(4); return o != 0 ? (Nebula.Ast.HandlerType)__p.bb.GetSbyte(o + __p.bb_pos) : Nebula.Ast.HandlerType.Go; } }
  public Nebula.Ast.HandlerData DataType { get { int o = __p.__offset(6); return o != 0 ? (Nebula.Ast.HandlerData)__p.bb.Get(o + __p.bb_pos) : Nebula.Ast.HandlerData.NONE; } }
  public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public Nebula.Ast.GoHandler DataAsGoHandler() { return Data<Nebula.Ast.GoHandler>().Value; }
  public Nebula.Ast.SetStateHandler DataAsSetStateHandler() { return Data<Nebula.Ast.SetStateHandler>().Value; }
  public Nebula.Ast.PrintHandler DataAsPrintHandler() { return Data<Nebula.Ast.PrintHandler>().Value; }
  public Nebula.Ast.SetStateHandlerWithValue DataAsSetStateHandlerWithValue() { return Data<Nebula.Ast.SetStateHandlerWithValue>().Value; }
  public Nebula.Ast.CompositeHandler DataAsCompositeHandler() { return Data<Nebula.Ast.CompositeHandler>().Value; }

  public static Offset<Nebula.Ast.Handler> CreateHandler(FlatBufferBuilder builder,
      Nebula.Ast.HandlerType type = Nebula.Ast.HandlerType.Go,
      Nebula.Ast.HandlerData data_type = Nebula.Ast.HandlerData.NONE,
      int dataOffset = 0) {
    builder.StartTable(3);
    Handler.AddData(builder, dataOffset);
    Handler.AddDataType(builder, data_type);
    Handler.AddType(builder, type);
    return Handler.EndHandler(builder);
  }

  public static void StartHandler(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddType(FlatBufferBuilder builder, Nebula.Ast.HandlerType type) { builder.AddSbyte(0, (sbyte)type, 0); }
  public static void AddDataType(FlatBufferBuilder builder, Nebula.Ast.HandlerData dataType) { builder.AddByte(1, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(2, dataOffset, 0); }
  public static Offset<Nebula.Ast.Handler> EndHandler(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Nebula.Ast.Handler>(o);
  }
}


static public class HandlerVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Type*/, 1 /*Nebula.Ast.HandlerType*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*DataType*/, 1 /*Nebula.Ast.HandlerData*/, 1, false)
      && verifier.VerifyUnion(tablePos, 6, 8 /*Data*/, Nebula.Ast.HandlerDataVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
