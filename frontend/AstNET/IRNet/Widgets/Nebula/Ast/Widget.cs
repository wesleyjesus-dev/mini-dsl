// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Nebula.Ast
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Widget : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Widget GetRootAsWidget(ByteBuffer _bb) { return GetRootAsWidget(_bb, new Widget()); }
  public static Widget GetRootAsWidget(ByteBuffer _bb, Widget obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyWidget(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, WidgetVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Widget __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Nebula.Ast.WidgetType Type { get { int o = __p.__offset(4); return o != 0 ? (Nebula.Ast.WidgetType)__p.bb.GetSbyte(o + __p.bb_pos) : Nebula.Ast.WidgetType.Scaffold; } }
  public Nebula.Ast.WidgetData DataType { get { int o = __p.__offset(6); return o != 0 ? (Nebula.Ast.WidgetData)__p.bb.Get(o + __p.bb_pos) : Nebula.Ast.WidgetData.NONE; } }
  public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public Nebula.Ast.Scaffold DataAsScaffold() { return Data<Nebula.Ast.Scaffold>().Value; }
  public Nebula.Ast.AppBar DataAsAppBar() { return Data<Nebula.Ast.AppBar>().Value; }
  public Nebula.Ast.Body DataAsBody() { return Data<Nebula.Ast.Body>().Value; }
  public Nebula.Ast.Text DataAsText() { return Data<Nebula.Ast.Text>().Value; }
  public Nebula.Ast.Button DataAsButton() { return Data<Nebula.Ast.Button>().Value; }
  public Nebula.Ast.Row DataAsRow() { return Data<Nebula.Ast.Row>().Value; }
  public Nebula.Ast.Column DataAsColumn() { return Data<Nebula.Ast.Column>().Value; }
  public Nebula.Ast.ElevatedButton DataAsElevatedButton() { return Data<Nebula.Ast.ElevatedButton>().Value; }

  public static Offset<Nebula.Ast.Widget> CreateWidget(FlatBufferBuilder builder,
      Nebula.Ast.WidgetType type = Nebula.Ast.WidgetType.Scaffold,
      Nebula.Ast.WidgetData data_type = Nebula.Ast.WidgetData.NONE,
      int dataOffset = 0) {
    builder.StartTable(3);
    Widget.AddData(builder, dataOffset);
    Widget.AddDataType(builder, data_type);
    Widget.AddType(builder, type);
    return Widget.EndWidget(builder);
  }

  public static void StartWidget(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddType(FlatBufferBuilder builder, Nebula.Ast.WidgetType type) { builder.AddSbyte(0, (sbyte)type, 0); }
  public static void AddDataType(FlatBufferBuilder builder, Nebula.Ast.WidgetData dataType) { builder.AddByte(1, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(2, dataOffset, 0); }
  public static Offset<Nebula.Ast.Widget> EndWidget(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Nebula.Ast.Widget>(o);
  }
  public static void FinishWidgetBuffer(FlatBufferBuilder builder, Offset<Nebula.Ast.Widget> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedWidgetBuffer(FlatBufferBuilder builder, Offset<Nebula.Ast.Widget> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class WidgetVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Type*/, 1 /*Nebula.Ast.WidgetType*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*DataType*/, 1 /*Nebula.Ast.WidgetData*/, 1, false)
      && verifier.VerifyUnion(tablePos, 6, 8 /*Data*/, Nebula.Ast.WidgetDataVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
