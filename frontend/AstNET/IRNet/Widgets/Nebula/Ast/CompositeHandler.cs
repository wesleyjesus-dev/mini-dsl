// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Nebula.Ast
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CompositeHandler : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CompositeHandler GetRootAsCompositeHandler(ByteBuffer _bb) { return GetRootAsCompositeHandler(_bb, new CompositeHandler()); }
  public static CompositeHandler GetRootAsCompositeHandler(ByteBuffer _bb, CompositeHandler obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CompositeHandler __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Nebula.Ast.Handler? Actions(int j) { int o = __p.__offset(4); return o != 0 ? (Nebula.Ast.Handler?)(new Nebula.Ast.Handler()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ActionsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Nebula.Ast.CompositeHandler> CreateCompositeHandler(FlatBufferBuilder builder,
      VectorOffset actionsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CompositeHandler.AddActions(builder, actionsOffset);
    return CompositeHandler.EndCompositeHandler(builder);
  }

  public static void StartCompositeHandler(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddActions(FlatBufferBuilder builder, VectorOffset actionsOffset) { builder.AddOffset(0, actionsOffset.Value, 0); }
  public static VectorOffset CreateActionsVector(FlatBufferBuilder builder, Offset<Nebula.Ast.Handler>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateActionsVectorBlock(FlatBufferBuilder builder, Offset<Nebula.Ast.Handler>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActionsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Nebula.Ast.Handler>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Nebula.Ast.Handler>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartActionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Nebula.Ast.CompositeHandler> EndCompositeHandler(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Nebula.Ast.CompositeHandler>(o);
  }
}


static public class CompositeHandlerVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Actions*/, Nebula.Ast.HandlerVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
